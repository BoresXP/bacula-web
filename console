#!/usr/bin/env php
<?php
/*
  +-------------------------------------------------------------------------+
  | Copyright (C) 2004 Juan Luis Frances Jimenez						    |
  | Copyright 2010-2018, Davide Franco                                      |
  |                                                                         |
  | This program is free software; you can redistribute it and/or           |
  | modify it under the terms of the GNU General Public License             |
  | as published by the Free Software Foundation; either version 2          |
  | of the License, or (at your option) any later version.                  |
  |                                                                         |
  | This program is distributed in the hope that it will be useful,         |
  | but WITHOUT ANY WARRANTY; without even the implied warranty of          |
  | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |
  | GNU General Public License for more details.                            |
  +-------------------------------------------------------------------------+
 */

require_once( 'core/global.inc.php' );

/*
 * Function:    printUsage
 * Parameters:  none
 *
 */

function printUsage() {
    echo "Bacula-Web version 8.0.0-RC1\n\n";
    echo "Usage:\n";
    echo "   php console [command]\n\n";
    echo "Available commands:\n";
    echo "   help\t\t\tPrint this help summary\n";
    echo "   check\t\tCheck requirements and permissions\n";
    echo "   setupauth\t\tSetup Apache authentication\n\n";
}

/*
 * Function:    getPassword
 * Parameters:  $prompt
 *
 */

function getPassword($prompt)
{
    // Save current tty settings 
    $ostty = `stty -g`;
    
    // Set tty in silent mode
    system("stty -echo -icanon min 1 time 0 2>/dev/null || " . "stty -echo cbreak");

    echo "$prompt :";
    // Drop newline at the end of the string
    $input = substr(fgets(STDIN), 0, -1);
    echo "\n";

    // Restore tty settings
    system ("stty $ostty");

    return $input;
}

/*
 * Display provided string in different color
 * @param string $string
 * @param string $type 
 */

function hightlight( $string, $type = 'error' ) {

/* shell colors
 * red : 31
 * green :  32
 * orange: 33
 */
    $colors = array( 'error' => '31', 'ok' => '32', 'warning' => '33', 'information' => '34');
    
    $color = $colors[$type];
    echo "\033[$color"."m" . $string . "\033[0m";
}

// Make sure the script is run from the command line
if(!(php_sapi_name() === 'cli')) {
    exit("You are not allowed to run this script from a web browser, but only from the command line");
} 

// Make sure at least one parameter has been provided
if( $argc < 2) {
    echo "\nError: you should provide at least one command\n\n";
    exit(printUsage());
}

// Get command from user input 
switch( $argv[1]) {
case'help':
    printUsage();
    break;
case 'check':
    echo PHP_EOL . '=======================' . PHP_EOL;
    echo 'Checking requirements' . PHP_EOL;
    echo '=======================' . PHP_EOL . PHP_EOL;

    // Check PHP version
    if(version_compare(PHP_VERSION, '5.6', '>=')) {
          echo "\tPHP version" . hightlight( 'Ok', 'ok') . PHP_EOL;
    }else{
          echo "PHP version" . hightlight( 'Error', 'error') . ']' . PHP_EOL;
    }

    // Check PHP timezone
    $timezone = ini_get('date.timezone');
    if (!empty($timezone)){
          echo "\tPHP timezone" . hightlight( 'Ok', 'ok') . PHP_EOL;
    }else{
          echo "\tPHP timezone" . hightlight( 'Warning', 'warning') . PHP_EOL;
    }

    // Check assets folder permissions
    if( is_writable('application/assets/protected')) {
          echo "\tProtected assets folder is writable" . hightlight( 'Ok', 'ok') . PHP_EOL;
    }else{
          echo "\tProtected assets folder is writable" . hightlight( 'Error', 'error') . PHP_EOL;
    }

    // Check Smarty cache folder permissions
    if(is_writable(VIEW_CACHE_DIR)) {
          echo "\tSmarty cache folder write permission" . hightlight( 'Ok', 'ok') . PHP_EOL;
    }else{
          echo "\tSmarty cache folder write permission" . hightlight( 'Error', 'error') . PHP_EOL;
    }

    // Check PHP Posix support
    if(function_exists('posix_getpwuid')) {
          echo "\tPHP Posix support" . hightlight( 'Ok', 'ok') . PHP_EOL;
    }else{
          echo "\tPHP Posix support" . hightlight( 'Error', 'error') . PHP_EOL;
    }

    // Check PHP PDO support
    if(class_exists('PDO')) {
          echo "\tPHP PDO support" . hightlight( 'Ok', 'ok') . PHP_EOL;
    }else{
          echo "\tPHP PDO support" . hightlight( 'Error', 'error') . PHP_EOL;
    }

    // Check PHP SQLite support
    if( in_array('sqlite', PDO::getAvailableDrivers() )) {
          echo "\tPHP SQLite support" . hightlight( 'Ok', 'ok') . PHP_EOL;
    }else{
          echo "\tPHP SQLite support" . hightlight( 'Error', 'error') . PHP_EOL;
    }

    // List available PHP PDO drivers
    echo PHP_EOL . hightlight('PDO drivers (available):', 'information');
    foreach ($pdo_drivers = PDO::getAvailableDrivers() as $driver) { echo "\t driver: $driver" . PHP_EOL; }

    // Check PHP Gettext support
    if(function_exists('gettext')) {
          echo "\tPHP Gettext support" . hightlight( 'Ok', 'ok') . PHP_EOL;
    }else{
          echo "\tPHP Gettext support" . hightlight( 'Error', 'error') . PHP_EOL;
    }

    // Check PHP Session support
    if(function_exists('session_start')) {
          echo "\tPHP Session support" . hightlight( 'Ok', 'ok') . PHP_EOL;
    }else{
          echo "\tPHP Session support" . hightlight( 'Error', 'error') . PHP_EOL;
    }

    break;
case 'setupauth':
    echo "Creating basic user authentication for Apache web server\n\n";

    // Make sure current directory is writable by current user
    echo "Checking if current directory is writable ...\n";

    if(!is_writable(dirname(__FILE__))) {
        exit("Error: cannot write into this directory\n");
    }else{
        echo "Success: This directory is writable, creating htpasswd file\n";
    }

    // Get user details from command line
    $username = readline("Enter your username: ");
    $username = str_replace(array("\n", "\t"), '', $username);

    $password = getPassword("Enter your password");

    // Hash the password
    $options = ['cost' => 12];
    $hashedPassword = password_hash($password, PASSWORD_DEFAULT, $options);

    $htpwdFile = '.htpasswd';

    // Check if .htpasswd already exists
    if(file_exists($htpwdFile)) {
        exit("\nError: file $htpwdFile already exists, please remove it and run this command again\n");
    }

    $handle = @fopen($htpwdFile, 'w');
    if($handle !== FALSE) {
        $data = "$username:$hashedPassword";
        fwrite($handle, $data);
        fclose($handle);
    }else{
        exit("\nError: unable to create file $htpwdFile, please check permissions\n");
    }
    break;
default:
    exit("\nError: unknown command, use <php console help> for further informations\n\n");
}

echo "\nGreat !!! Apache authentication setup is now completed\n\n";
echo "You can now use the credentials you've provided to access Bacula-Web\n";

?>
